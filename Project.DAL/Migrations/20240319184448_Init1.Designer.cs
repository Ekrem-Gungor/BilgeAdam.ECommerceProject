// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.DAL.ContextClasses;

#nullable disable

namespace Project.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20240319184448_Init1")]
    partial class Init1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "d176a4ec-ef63-46c5-affd-e7b8bf6aff2f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5eb40bd1-e453-400e-9deb-17489ddde035",
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(6342),
                            Email = "ekrmdsgnr@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EKRMDSGNR@GMAIL.COM",
                            NormalizedUserName = "EKO",
                            PasswordHash = "AQAAAAIAAYagAAAAEOKUDt0bjW6YTU+QU4gnM5wSqQ5zZKXVCwMUPFt83Ii2Cfj+tdi2DwcEJyWGHsqQsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2dddbf4-67c5-42e3-aaae-cdbf9c4ca99f",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "eko"
                        });
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.AppUserProfile", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Outdoors",
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(4131),
                            Description = "Oldular sinema voluptatem velit de aliquam ut sıla non otobüs.",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Electronics",
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(4492),
                            Description = "Gazete corporis adresini dolores dağılımı voluptatem sıradanlıktan uzattı ut praesentium.",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Garden",
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(4565),
                            Description = "Balıkhaneye çorba enim ea dergi doğru et vitae ex mıknatıslı.",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Games",
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(4636),
                            Description = "De corporis reprehenderit dolores gidecekmiş aliquam ut orta ama illo.",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Clothing",
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(4733),
                            Description = "Dignissimos gazete tempora aut et adresini eaque iusto ex iure.",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Clothing",
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(4801),
                            Description = "Dicta voluptatem quia voluptatem adanaya adresini voluptatem quaerat ducimus veritatis.",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Clothing",
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(4864),
                            Description = "De gidecekmiş enim ut balıkhaneye ut consequuntur anlamsız ut lambadaki.",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Outdoors",
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(4926),
                            Description = "Sayfası yaptı odit quis numquam sequi labore doloremque iusto eos.",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Kids",
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(5021),
                            Description = "Koştum sayfası telefonu kapının bundan ki inventore aperiam göze quia.",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Home",
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(5088),
                            Description = "Aperiam eum veritatis aut voluptatum vel gül orta değerli beğendim.",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AppUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceOfOrder")
                        .HasColumnType("money");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(5217),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Ergonomic Concrete Keyboard",
                            Status = 1,
                            UnitPrice = 357.49m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(5456),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Handmade Rubber Soap",
                            Status = 1,
                            UnitPrice = 711.36m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(5555),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Sleek Metal Bacon",
                            Status = 1,
                            UnitPrice = 965.39m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(5625),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Incredible Fresh Shoes",
                            Status = 1,
                            UnitPrice = 821.98m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(5693),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Handmade Metal Hat",
                            Status = 1,
                            UnitPrice = 979.68m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(5760),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Ergonomic Wooden Tuna",
                            Status = 1,
                            UnitPrice = 961.03m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 7,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(5827),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Gorgeous Granite Car",
                            Status = 1,
                            UnitPrice = 680.25m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 8,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(5940),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Awesome Granite Car",
                            Status = 1,
                            UnitPrice = 799.00m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 9,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(6004),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Awesome Steel Soap",
                            Status = 1,
                            UnitPrice = 632.58m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 10,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2024, 3, 19, 21, 44, 47, 889, DateTimeKind.Local).AddTicks(6068),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Awesome Steel Mouse",
                            Status = 1,
                            UnitPrice = 353.29m,
                            UnitsInStock = 100
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Project.ENTİTİES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Project.ENTİTİES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTİTİES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Project.ENTİTİES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.AppUserProfile", b =>
                {
                    b.HasOne("Project.ENTİTİES.Models.AppUser", "AppUser")
                        .WithOne("Profile")
                        .HasForeignKey("Project.ENTİTİES.Models.AppUserProfile", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.Category", b =>
                {
                    b.HasOne("Project.ENTİTİES.Models.Category", null)
                        .WithMany("Categories")
                        .HasForeignKey("CategoryID");
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.Order", b =>
                {
                    b.HasOne("Project.ENTİTİES.Models.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.OrderDetail", b =>
                {
                    b.HasOne("Project.ENTİTİES.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTİTİES.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.Product", b =>
                {
                    b.HasOne("Project.ENTİTİES.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.AppUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.Category", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Project.ENTİTİES.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
